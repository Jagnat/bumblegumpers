{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"OFF",
				"OFFSETOF"
			],
			[
				"RenderDraw",
				"imguiRenderDrawListsCallback"
			],
			[
				"editorDraw",
				"editorDrawEditMode"
			],
			[
				"ECOLOR",
				"ECOLOR_EM_SEL"
			],
			[
				"DEPTH",
				"DEPTH_GUI_OVERLAY"
			],
			[
				"DE",
				"DEPTH_BLAYER"
			],
			[
				"ECOLO",
				"ECOLOR_SCROLL_BG"
			],
			[
				"GL_TEX",
				"GL_TEXTURE_2D"
			],
			[
				"Buf",
				"BufferPool"
			],
			[
				"tile",
				"getTileAt"
			],
			[
				"sweep",
				"sweepMoving"
			],
			[
				"min",
				"minkowskiDiff"
			],
			[
				"CAM",
				"CAMERA_MODE_GAME"
			],
			[
				"Vet",
				"VertexBuffer"
			],
			[
				"Vec",
				"Vec2_Dot"
			],
			[
				"frame",
				"framebufferTexture"
			],
			[
				"GL_COL",
				"GL_COLOR_BUFFER_BIT"
			],
			[
				"program",
				"framebufferProgramId"
			],
			[
				"rse",
				"resizeRenderer"
			],
			[
				"came",
				"cameraLoc"
			],
			[
				"targ",
				"targetUpdateDelta"
			],
			[
				"Black",
				"CRGB::Black"
			],
			[
				"LightGr",
				"CRGB::LightGrey"
			],
			[
				"Gray",
				"CRGB::DarkGray"
			],
			[
				"indices",
				"num_indices"
			],
			[
				"view",
				"view_loc"
			],
			[
				"uniform",
				"uniform_locs"
			],
			[
				"progra",
				"program_pre_id"
			],
			[
				"chunk",
				"chunk_get"
			],
			[
				"projec",
				"projection_loc"
			],
			[
				"cam",
				"cam_pos"
			],
			[
				"spec",
				"get_specular"
			],
			[
				"num",
				"num_indices"
			],
			[
				"del",
				"delay_test"
			],
			[
				"reso",
				"post_reso_loc"
			],
			[
				"frag",
				"frag_coord"
			],
			[
				"w",
				"render_width"
			],
			[
				"post",
				"program_post_id"
			],
			[
				"vbo_",
				"vbo_fbo_id"
			],
			[
				"fbo_",
				"fbo_tex_loc"
			],
			[
				"fbo",
				"fbo_verts"
			],
			[
				"vbo",
				"vbo_fbo_id"
			],
			[
				"player",
				"player_cam_current"
			],
			[
				"mouse",
				"mouse_delta_y"
			],
			[
				"mose",
				"mouse_delta_y"
			],
			[
				"INPUT",
				"INPUT_PULLUP"
			],
			[
				"ela",
				"elapsed_ms"
			],
			[
				"window_",
				"window_height"
			],
			[
				"wino",
				"window_width"
			],
			[
				"addd",
				"added_v"
			],
			[
				"mouse_",
				"mouse_event_happened"
			],
			[
				"set_ver",
				"set_vert_col"
			],
			[
				"set_",
				"set_vert_col"
			],
			[
				"Mat4_Pers",
				"Mat4_PerspectiveOffCenter"
			],
			[
				"col",
				"col3"
			],
			[
				"viewport",
				"viewport_w"
			],
			[
				"matri",
				"mvp_matrix_loc"
			],
			[
				"viewp",
				"viewport_w"
			],
			[
				"CreatePer",
				"CreatePerspectiveOffCenter"
			],
			[
				"_p",
				"_pool_id_at"
			],
			[
				"_",
				"_pool_id_at"
			],
			[
				"progr",
				"shader_program"
			],
			[
				"flap",
				"flapOpen"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/bg.cpp",
			"settings":
			{
				"buffer_size": 9490,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/bg_editor.cpp",
			"settings":
			{
				"buffer_size": 8796,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/bg_render.cpp",
			"settings":
			{
				"buffer_size": 17607,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/thirdparty/imgui.cpp",
			"settings":
			{
				"buffer_size": 428252,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/bg_world.cpp",
			"settings":
			{
				"buffer_size": 7715,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/Jagannath/Documents/Programming/_old/Trig/main.cpp",
			"settings":
			{
				"buffer_size": 5844,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/Jagannath/Documents/Programming/_old/tilemapper/tilemapper.c",
			"settings":
			{
				"buffer_size": 5450,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#define JSTB_IMAGE_WRITE_IMPLEMENTATION\n#include \"jstb_image_write.h\"\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <assert.h>\n#include <time.h>\n#include <stdint.h>\n\n// Struct definitions\ntypedef struct Params_\n{\n	int img_w, img_h;\n	double x, y, width;\n	int iterations;\n	char normalize;\n} Params;\n\ntypedef struct Vec2d_ { double x, y; } Vec2d;\n\n// Function declarations\ndouble lerp(double a, double b, double x) {return (1-x)*a + x*b;}\nstatic Params get_properties();\nstatic void screen_to_set(Params p, int x, int y, Vec2d *pos);\ndouble value_at(Vec2d pos, char normalize, int max_iterations);\ndouble convert_range(double old_min, double old_max, double new_min, double new_max, double val);\n\nvoid write_mandelbrot_image(char *path, Params p, void (*func)(jImage *img, Params par));\n\nvoid black_white(jImage *img, Params p);\nvoid linear(jImage *img, Params p);\nvoid histogram(jImage *img, Params p);\n\nvoid colorfunc_1(double input, unsigned char *r, unsigned char *g, unsigned char *b);\n\nint main(int argc, char **argv)\n{\n	Params p = get_properties();\n	//write_mandelbrot_image_bw(\"test.png\", p);\n	write_mandelbrot_image(\"test.png\", p, histogram);\n	//get_properties();\n	return 0;\n}\n\n// check if file exists\n// if exists, parse\n// else, generate\n// assign params, return\nParams get_properties()\n{\n	Params p = {1500, 1000, -0.75, 0.0, 3.5, 100, 1};\n\n	FILE *fp = NULL;\n	if ((fp = fopen(\"params.txt\", \"r\")) == NULL)\n	{\n		// create file\n		if ((fp = fopen(\"params.txt\", \"w\")) != NULL)\n		{\n			printf(\"No params.txt! Creating default...\\n\");\n			// write to file\n			fprintf(fp, \"IMG_W:1500\\nIMG_H:1000\\nX:-0.75\\nY:0.0\\nW:3.5\\nITERATIONS:100\\nNORMALIZE:1\\n\");\n			fclose(fp);\n		}\n		return p;\n	}\n	else\n	{\n		printf(\"Params file exists! Parsing...\\n\\n\");\n		while (fgetc(fp) != ':');\n		fscanf(fp, \"%d\", &p.img_w);\n		printf(\"img_w:%d\\n\", p.img_w);\n\n		while (fgetc(fp) != ':');\n		fscanf(fp, \"%d\", &p.img_h);\n		printf(\"img_h:%d\\n\", p.img_h);\n\n		while (fgetc(fp) != ':');\n		fscanf(fp, \"%lf\", &p.x);\n		printf(\"x:%f\\n\", p.x);\n\n		while (fgetc(fp) != ':');\n		fscanf(fp, \"%lf\", &p.y);\n		printf(\"y:%f\\n\", p.y);\n\n		while (fgetc(fp) != ':');\n		fscanf(fp, \"%lf\", &p.width);\n		printf(\"width:%f\\n\", p.width);\n\n		while (fgetc(fp) != ':');\n		fscanf(fp, \"%d\", &p.iterations);\n		printf(\"iterations:%d\\n\", p.iterations);\n\n		while (fgetc(fp) != ':');\n		fscanf(fp, \"%d\", &p.normalize);\n		printf(\"normalize:%d\\n\\n\", p.normalize);\n	}\n\n	return p;\n}\n\nint val_int(Vec2d pos, int max_iterations);\n\n// Creates a histogram of the amount of times\n// mandelbrot values appear, giving some insight\n// into how deep into the fractal we are.\nvoid histogram(jImage *img, Params p)\n{\n	int *histogram = calloc(p.iterations + 1, sizeof(int));\n	if (!histogram)\n		printf (\"Failed to allocate histogram!\\n\");\n\n	for (int x = 0; x < p.img_w; ++x)\n	{\n		for (int y = 0; y < p.img_h; ++y)\n		{\n			Vec2d v;\n			int val = 0;\n			screen_to_set(p, x, y, &v);\n			val = val_int(v, p.iterations);\n			histogram[val]++;\n		}\n	}\n\n	int total_px = p.img_w * p.img_h;\n\n	// Create histogram image\n	jImage hist = {0};\n	create_image(&hist, p.iterations + 1, 2000);\n	for (int x = 0; x < p.iterations + 1; ++x)\n	{\n		for (int y = 0; y < 2000; ++y)\n		{\n			if ((2000 - y) < histogram[x])\n				set_pixel(hist, x, y, 255, 255, 255);\n			else\n				set_pixel(hist, x, y, 0, 50, 0);\n		}\n	}\n	save_image(hist, \"hist.png\");\n	free_image(&hist);\n\n	double *perc = calloc(p.iterations + 1, sizeof(double));\n	for (int i = 0; i < p.iterations + 1; ++i)\n	{\n		perc[i] = (double)histogram[i] / (double)total_px;\n	}\n\n	for (int i = 0; i < p.iterations + 1; ++i)\n	{\n		if (i != 0)\n			perc[i] += perc[i - 1];\n	}\n\n	for (int x = 0; x < p.img_w; ++x)\n	{\n		for (int y = 0; y < p.img_h; ++y)\n		{\n			Vec2d v;\n			double val = 0;\n			screen_to_set(p, x, y, &v);\n			val = value_at(v, p.normalize, p.iterations);\n			double d0 = perc[(int)val];\n			double d1 = perc[(int)(val + 1 > p.iterations ? val : val + 1)];\n			double i = val - floor(val);\n			double a = lerp(d0, d1, i);\n			unsigned char r, g, b;\n			colorfunc_1(a, &r, &g, &b);\n			set_pixel(*img, x, y, r, g, b);\n		}\n	}\n}\n\nvoid linear(jImage *img, Params p)\n{\n	double minimum = 1000000, maximum = 0;\n	for (int x = 0; x < p.img_w; ++x)\n	{\n		for (int y = 0; y < p.img_h; ++y)\n		{\n			Vec2d v;\n			double val = 0;\n			screen_to_set(p, x, y, &v);\n			val = value_at(v, p.normalize, p.iterations);\n			if (val < minimum)\n				minimum = val;\n			if (val > maximum)\n				maximum = val;\n			unsigned char b = (unsigned char)((val / (double)p.iterations) * 255.0L);\n			set_pixel(*img, x, y, b, b, b);\n		}\n	}\n\n	minimum /= (double)p.iterations;\n	maximum /= (double)p.iterations;\n	printf(\"Minimum: %f\\nMaximum: %f\\n\", minimum, maximum);\n\n	for (int x = 0; x < p.img_w; ++x)\n	{\n		for (int y = 0; y < p.img_h; ++y)\n		{\n			unsigned char v;\n			get_pixel(*img, x, y, &v, 0, 0);\n			double a = (double)v / 255.0L;\n			a = convert_range(minimum, maximum, 0, 1, a);\n			unsigned char r, g, b;\n			colorfunc_1(a, &r, &g, &b);\n			set_pixel(*img, x, y, r, g, b);\n		}\n	}\n}\n\nvoid black_white(jImage *img, Params p)\n{\n	for (int x = 0; x < p.img_w; ++x)\n	{\n		for (int y = 0; y < p.img_h; ++y)\n		{\n			Vec2d v;\n			double val = 0;\n			screen_to_set(p, x, y, &v);\n			val = value_at(v, p.normalize, p.iterations);\n			// Set Data\n			unsigned char b = (unsigned char)((val / (double)p.iterations) * 255.0L);\n			set_pixel(*img, x, y, b, b, b);\n		}\n	}\n}\n\nvoid colorfunc_1(double input, unsigned char *r, unsigned char *g, unsigned char *b)\n{\n	const double p1 = 0.25f;\n	const double p2 = 0.5f;\n	const double p3 = 0.75f;\n	if (input < 0)\n		input = 0;\n	if (input > 0.99f)\n	{\n		*r = 0; *g = 0; *b = 0;\n		return;\n	}\n	if (input >= 0 && input < p1)\n	{\n		input /= p1;\n		*r = (unsigned char)(lerp(0.1, 0, input) * 255);\n		*g = (unsigned char)(lerp(0.1, 0, input) * 255);\n		*b = (unsigned char)(lerp(0.3, 1, input) * 255);\n	}\n	else if (input >= p1 && input < p2)\n	{\n		input -= p1;\n		input /= (p2 - p1);\n		*r = (unsigned char)(lerp(0, 0.3, input) * 255);\n		*g = (unsigned char)(lerp(0, 0.16, input) * 255);\n		*b = (unsigned char)(lerp(1, 0.51, input) * 255);\n	}\n	else if (input >= p2 && input < p3)\n	{\n		input -= p2;\n		input /= (p3 - p2);\n		*r = (unsigned char)(lerp(0.3, 0.59, input) * 255);\n		*g = (unsigned char)(lerp(0.16, 0, input) * 255);\n		*b = (unsigned char)(lerp(0.51, 0.09, input) * 255);\n	}\n	else\n	{\n		input -= p3;\n		input /= (1 - p3);\n		*r = (unsigned char)(lerp(0.59, 0, input) * 0);\n		*g = (unsigned char)(lerp(0, 0, input) * 0);\n		*b = (unsigned char)(lerp(0.09, 0, input) * 0);\n	}\n}\n\nvoid write_mandelbrot_image(char *path, Params p, void(*func)(jImage *img, Params par))\n{\n	clock_t start = clock(), diff;\n	jImage img = {0};\n	create_image(&img, p.img_w, p.img_h);\n\n	func(&img, p);\n\n	save_image(img, path);\n	diff = clock() - start;\n	printf(\"Done! It took %5.3f seconds.\\n\", (double)diff / (double)CLOCKS_PER_SEC);\n}\n\nint val_int(Vec2d pos, int max_iterations)\n{\n	double x = 0, y = 0;\n	int i = 0;\n	double smooth = 0;\n	while (x * x + y * y < (1 << 16) && i < max_iterations)\n	{\n		double x_temp = x * x - y * y + pos.x;\n		y = 2 * x * y + pos.y;\n		x = x_temp;\n		++i;\n	}\n	return i;\n}\n\ndouble value_at(Vec2d pos, char normalize, int max_iterations)\n{\n	double x = 0, y = 0;\n	int i = 0;\n	double smooth = 0;\n	while (x * x + y * y < (1 << 16) && i < max_iterations)\n	{\n		double x_temp = x * x - y * y + pos.x;\n		y = 2 * x * y + pos.y;\n		x = x_temp;\n		++i;\n	}\n\n	if (normalize && i < max_iterations)\n	{\n		double zn = sqrt(x * x + y * y);\n		double nu = log(log(zn) / 0.69314718056L) / 0.69314718056L;\n		smooth = i + 1 - nu;\n	}\n	else\n	{\n		smooth = i;\n	}\n\n	return smooth;\n}\n\nvoid screen_to_set(Params p, int x, int y, Vec2d *pos)\n{\n	pos->x = convert_range(0, p.img_w, p.x - p.width / 2,\n		p.x + p.width / 2, x);\n	pos->y = convert_range(0, p.img_h, -p.y - p.width / 2 / ((double)p.img_w / (double)p.img_h),\n		-p.y + p.width / 2 / ((double)p.img_w / (double)p.img_h), y);\n}\n\ndouble convert_range(double old_min, double old_max, double new_min, double new_max, double val)\n{\n	double old_range = old_max - old_min;\n	double new_range = new_max - new_min;\n	return old_range == 0 ?\n		new_min :\n		(((val - old_min) * new_range) / old_range) + new_min;\n}\n",
			"file": "/D/Programming/fractal/fractal.c",
			"file_size": 8342,
			"file_write_time": 131191406080000000,
			"settings":
			{
				"buffer_size": 8137,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/Jagannath/Desktop/script.py",
			"settings":
			{
				"buffer_size": 859,
				"line_ending": "Windows",
				"name": "# This script re-organizes date-named (yyyy-mm-dd)"
			}
		},
		{
			"file": "src/primitives.cpp",
			"settings":
			{
				"buffer_size": 7953,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/thirdparty/imgui.h",
			"settings":
			{
				"buffer_size": 122864,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/bg.h",
			"settings":
			{
				"buffer_size": 1015,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/bg_render.h",
			"settings":
			{
				"buffer_size": 2213,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/bg_world.h",
			"settings":
			{
				"buffer_size": 963,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/Jagannath/Documents/Programming/dualcontouring_test/dualcontouring.cpp",
			"settings":
			{
				"buffer_size": 2897,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "BG Build",
	"command_palette":
	{
		"height": 104.0,
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"debug",
				"Build: Debug"
			],
			[
				"clean",
				"Build: Clean"
			],
			[
				"debu",
				"Build: Debug"
			],
			[
				"package",
				"Package Control: Remove Package"
			],
			[
				"add",
				"Package Control: Add Repository"
			],
			[
				"deb",
				"Build: Debug"
			],
			[
				"sspltx",
				"Set Syntax: Plain Text"
			],
			[
				"build:buil",
				"Build: Build"
			],
			[
				"commit",
				"Git: Commit"
			],
			[
				"package control:ins",
				"Package Control: Install Package"
			],
			[
				"d",
				"Build: Debug"
			],
			[
				"clen",
				"Build: Clean"
			],
			[
				"clea",
				"Build: Clean"
			],
			[
				"de",
				"Build: Debug"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"p",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Remove Package"
			],
			[
				"package control: Install Package",
				"Package Control: Install Package"
			],
			[
				"package control",
				"Package Control: List Packages"
			],
			[
				"build debu",
				"Build: Debug"
			],
			[
				"buld clean",
				"Build: Clean"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 125.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/Jagannath/Documents/Programming/jpmtest/index.js",
		"/C/Users/Jagannath/Documents/Programming/_old/fractal/fractal.c",
		"/C/Users/Jagannath/Documents/Programming/_old/Trig/trigfuncs.cpp",
		"/C/Users/Jagannath/Documents/Programming/_old/Trig/texture.c",
		"/C/Users/Jagannath/Documents/Processing/bezier_play/bezier_play.pde",
		"/C/Users/Jagannath/Documents/Programming/bumblegumpers/win/build.bat",
		"/C/Users/Jagannath/Documents/Programming/Misc/stln.c",
		"/C/Users/Jagannath/Documents/Programming/libraries/imgui-master/examples/opengl2_example/main.cpp",
		"/C/Users/Jagannath/Documents/Programming/libraries/imgui-master/imgui_demo.cpp",
		"/C/Users/Jagannath/Documents/Programming/libraries/imgui-master/examples/opengl2_example/imgui_impl_glfw.h",
		"/C/Users/Jagannath/Documents/Programming/libraries/imgui-master/examples/opengl2_example/imgui_impl_glfw.cpp",
		"/C/Users/Jagannath/Documents/Programming/greg-master/src/greg.cpp",
		"/C/Users/Jagannath/Documents/Programming/greg-master/README.md",
		"/C/Users/Jagannath/Documents/Programming/bumblegumpers/src/thirdparty/imgui_draw.cpp",
		"/C/Users/Jagannath/Documents/Programming/Misc/goulder.html",
		"/C/Users/Jagannath/Documents/Programming/bumblegumpers/src/bg_debug_render.h",
		"/C/Users/Jagannath/Documents/Programming/bumblegumpers/src/bg_debug_render.cpp",
		"/C/Users/Jagannath/Documents/Programming/bumblegumpers/src/bg_editor.h",
		"/C/Users/Jagannath/Documents/Programming/bumblegumpers/src/thirdparty/imgui_internal.h",
		"/C/Users/Jagannath/Documents/Programming/libraries/imgui-master/README.md",
		"/C/Users/Jagannath/Documents/Programming/bumblegumpers/src/bg_world.cpp",
		"/C/Users/Jagannath/Documents/Programming/bumblegumpers/src/primitives.cpp",
		"/C/Users/Jagannath/Documents/Programming/bumblegumpers/src/bg_imgui.cpp",
		"/C/Users/Jagannath/Documents/Programming/bumblegumpers/src/bg_imgui.h",
		"/C/Users/Jagannath/Documents/Programming/libraries/imgui-master/examples/sdl_opengl3_example/main.cpp",
		"/C/Users/Jagannath/Documents/Programming/libraries/imgui-master/examples/sdl_opengl3_example/imgui_impl_sdl_gl3.h",
		"/C/Users/Jagannath/Documents/Programming/libraries/imgui-master/examples/sdl_opengl3_example/imgui_impl_sdl_gl3.cpp",
		"/C/Users/Jagannath/Documents/Programming/bumblegumpers/src/primitives.h",
		"/C/Users/Jagannath/Documents/Programming/bumblegumpers/src/bg_world.h",
		"/C/Users/Jagannath/Documents/Programming/libraries/imgui-master/extra_fonts/binary_to_compressed_c.cpp",
		"/C/Users/Jagannath/Documents/Programming/libraries/imgui-master/imgui_draw.cpp",
		"/C/Users/Jagannath/Documents/Programming/libraries/imgui-master/stb_textedit.h",
		"/C/Users/Jagannath/Documents/Programming/bumblegumpers/src/res/fragment.glsl",
		"/C/Users/Jagannath/Documents/Programming/bumblegumpers/src/res/vertex.glsl",
		"/C/Users/Jagannath/Documents/Programming/libraries/stb-master/stb_tilemap_editor.h",
		"/C/Users/Jagannath/Documents/Programming/jsn/jsn_spritebatch.h",
		"/C/Users/Jagannath/Documents/Programming/bitconvert/bitconvert.go",
		"/C/Users/Jagannath/Documents/Programming/jn_xm/main.c",
		"/C/Users/Jagannath/Documents/Programming/bumblegumpers/src/game.h",
		"/C/Users/Jagannath/Documents/Programming/bumblegumpers/src/game_assets.cpp",
		"/C/Users/Jagannath/Documents/Programming/bumblegumpers/src/game_assets.h",
		"/C/Users/Jagannath/Documents/Programming/bumblegumpers/src/game.cpp",
		"/C/Users/Jagannath/Documents/Programming/bg/src/game_render.cpp",
		"/C/Users/Jagannath/Documents/Programming/bg/src/questrial.h",
		"/C/Users/Jagannath/Desktop/font.fnt",
		"/C/Users/Jagannath/Documents/Programming/bg/src/res/font-bake.c",
		"/C/Users/Jagannath/Documents/Programming/bg/src/res/test.cpp",
		"/C/Users/Jagannath/Documents/Programming/bg/src/game.cpp",
		"/C/Users/Jagannath/Documents/Programming/bg/src/res/output.cpp",
		"/C/Users/Jagannath/Documents/Programming/bg/src/game_render.h",
		"/C/Users/Jagannath/Documents/Programming/bg/src/res/fragment.glsl",
		"/C/Users/Jagannath/Documents/Programming/bg/src/stb_image_write.h",
		"/C/Users/Jagannath/Documents/Programming/bg/src/font-bake.c",
		"/C/Users/Jagannath/Documents/Programming/bg/src/primitives.h",
		"/C/Users/Jagannath/Documents/Programming/bg/src/primitives.cpp",
		"/C/Users/Jagannath/Documents/Programming/bg//src/bg_render.cpp",
		"/C/Users/Jagannath/Documents/Programming/bg//src/game_render.h",
		"/C/Users/Jagannath/Documents/Programming/bg/src/bg_render.h",
		"/C/Users/Jagannath/Documents/Programming/bg/src/bg_render.cpp",
		"/C/Users/Jagannath/Documents/Programming/bg//src/bg_render_bak.h",
		"/C/Users/Jagannath/Documents/Programming/bg//src/bg_render_bak.cpp",
		"/C/Users/Jagannath/Documents/Programming/bg//src/bg_render.h",
		"/C/Users/Jagannath/Documents/Programming/_old/bintosource/bintosource.c",
		"/C/Users/Jagannath/Documents/Programming/_old/bintosource/test.c",
		"/src/bg_util.h",
		"/C/Users/Jagannath/Documents/Programming/bg/src/bg_util.h",
		"/C/Users/Jagannath/Documents/Programming/bg/bumblegumpers.sublime-project",
		"/C/Users/Jagannath/Documents/Programming/bg/win/build.bat",
		"/C/Users/Jagannath/Documents/Programming/bg/linux/clean.sh",
		"/C/Users/Jagannath/Documents/Programming/bg/linux/build.sh",
		"/C/Users/Jagannath/Documents/Programming/bg/win/debug.bat",
		"/C/Users/Jagannath/Desktop/dark.reg",
		"/C/Users/Jagannath/Desktop/HC.reg",
		"/C/Users/Jagannath/Documents/Programming/feather/src/feather_funcs.h",
		"/C/Users/Jagannath/Documents/Programming/feather/src/feather_data.h",
		"/C/Users/Jagannath/Documents/Programming/adventur/win/build.bat",
		"/C/Users/Jagannath/Documents/Programming/game/src/game_logic.cpp",
		"/C/Users/Jagannath/Documents/Programming/feather/win/build2.bat",
		"/C/Users/Jagannath/Documents/Programming/feather/feather.sublime-project",
		"/C/Users/Jagannath/Documents/Programming/game/src/game_logic.h",
		"/C/Users/Jagannath/AppData/Roaming/Sublime Text 2/Packages/User/C++.sublime-settings",
		"/C/Users/Jagannath/AppData/Roaming/Sublime Text 2/Packages/User/C.sublime-settings",
		"/C/Program Files (x86)/Steam/steamapps/common/Starbound/giraffe_storage/starbound.config",
		"/C/Users/Jagannath/Documents/Programming/feather/win/build.bat",
		"/C/Program Files (x86)/Steam/steamapps/common/Starbound/doc/OPENSOURCE.md",
		"/C/Users/Jagannath/Documents/Programming/game/win/build2.bat",
		"/C/Users/Jagannath/Documents/Programming/feather/src/feather.cpp",
		"/C/Users/Jagannath/Documents/Programming/game/src/game.cpp",
		"/C/Users/Jagannath/Documents/Programming/game/src/game_render.cpp",
		"/C/Users/Jagannath/Documents/Programming/feather/src/stb_truetype.h",
		"/C/Users/Jagannath/Documents/Programming/feather/src/feather_buffer.cpp",
		"/C/Users/Jagannath/Documents/Programming/feather/src/feather_gl.cpp",
		"/C/Users/Jagannath/AppData/Roaming/Sublime Text 2/Packages/Color Scheme - Default/krom.tmTheme",
		"/C/Users/Jagannath/Documents/My Games/Sid Meier's Civilization 5/config.ini",
		"/src/feather_data.h",
		"/C/Users/Jagannath/Documents/Programming/feather/src/game.cpp",
		"/C/Users/Jagannath/Documents/Programming/feather/src/game_assets.cpp",
		"/C/Users/Jagannath/Documents/Programming/feather/src/game_render.cpp",
		"/C/Users/Jagannath/Documents/Programming/feather/src/old_snippets.cpp",
		"/C/Users/Jagannath/Documents/Programming/feather/src/primitives.cpp",
		"/C/Users/Jagannath/Documents/Programming/feather/src/primitives.h",
		"/C/Users/Jagannath/Documents/Programming/obbg-master/src/physics.c",
		"/C/Users/Jagannath/Documents/Programming/feather/src/game_assets.h",
		"/C/Users/Jagannath/Documents/Programming/feather/src/game_render.h",
		"/C/Users/Jagannath/Documents/Programming/feather/src/game.h",
		"/C/Users/Jagannath/Documents/Programming/Misc/stbtt_test.c",
		"/C/Users/Jagannath/Documents/Programming/feather/tasks.txt",
		"/H/dir/setup.bat",
		"/G/dir/setup.bat",
		"/C/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/vcvars32.bat",
		"/G/Programming/adventur/win/build.bat",
		"/G/config.txt",
		"/D/Ableton Live 9 Suite v9.6.1 WIN[FINAL]/Ableton.Live.Suite.v9.6.1.x64.WIN/Patch/Ableton Live 9 Patch [io]/Ableton Live 9 Patch [io]/io.nfo",
		"/D/Ableton Live 9 Suite 9.0.2 (Win 32 bit-io) [ChingLiu]/ChingLiu.Install.Notes.nfo",
		"/D/Ableton Live 9 Suite v9.6.1 WIN[FINAL]/Torrent downloaded from Demonoid.ooo.txt",
		"/D/lucysback/contacts/contacts_20160116160405.vcf",
		"/C/Users/Jagannath/Documents/Programming/game/win/log.txt",
		"/C/Users/Jagannath/AppData/Roaming/.minecraft/assets/indexes/1.10.json",
		"/C/Users/Jagannath/Documents/Programming/rpi/blink/src/main.s",
		"/C/Users/Jagannath/Documents/Arduino/led_matrix/led_matrix.ino",
		"/C/Users/Jagannath/Documents/Programming/rpi/blink/Makefile",
		"/C/Users/Jagannath/Documents/Programming/rpi/blink/kernel.ld",
		"/C/Users/Jagannath/Documents/Programming/rpi/template/Makefile",
		"/C/Users/Jagannath/Documents/Programming/rpi/blink/main.s",
		"/C/Users/Jagannath/Documents/Programming/rpi/template/kernel.ld",
		"/C/Users/Jagannath/Documents/Programming/demotest/main.c",
		"/C/Users/Jagannath/Documents/Programming/game/src/res/vertex.glsl",
		"/C/Users/Jagannath/Documents/Programming/game/src/game_assets.cpp"
	],
	"find":
	{
		"height": 102.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			"",
			"$project",
			"<project>",
			"\"<project>",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"Begin",
			"ImTextureID",
			"ImDrawIdx",
			"ImFontAtlas",
			"editor",
			"GetTexDataAsRGBA32",
			"GetIO",
			"ImGuiContext",
			"ImGuiContext4",
			"ImGuiContext",
			"GImGui",
			"252",
			"256",
			"1ded0138-47ce-435e-84ef-9ec1f439b749",
			"PAINT",
			"paint",
			"SwapBuffers",
			"KEY",
			"key",
			"Feather",
			"key",
			"music",
			"creative3",
			"creative",
			"player",
			"addSprite",
			"glClearC",
			"ft",
			"scale",
			"scalefor",
			"stb",
			"iboId",
			"shaders",
			"glGenTextures",
			"glActi",
			"beginRend",
			"checkCo",
			"m2to1",
			"view",
			"translate",
			"player",
			"64",
			"proj",
			"projU",
			"render",
			"init",
			"glBindVer",
			"Ortho",
			"ortho",
			"lerp",
			"glew",
			"device",
			"Win32ProcessPending",
			"string",
			"bracket",
			"brackets",
			"comment",
			"while ",
			"wndclassa",
			"WNDCLASSA",
			"win32_state",
			"add",
			"x",
			"(rand() < (RAND_MAX / 100))\n					ch",
			"mesh",
			"Mat4",
			"mat4",
			"Mat4",
			"matrix_view",
			"post_reso",
			"renderstate->",
			"Platform",
			"platform_api",
			"Platform",
			"program_post_id",
			":\n",
			"sizeof",
			"mv",
			"g)",
			"r)",
			"24",
			"disable",
			"enable",
			"#define far",
			"near",
			"key",
			"control",
			"square",
			"if",
			"rad game",
			"BOTTOM",
			"7",
			"3",
			"14",
			"8",
			"5",
			"15",
			"16",
			"5",
			"y",
			"x",
			"oldMax",
			"oldRange",
			"#define*DECLSPEC",
			"DECLSPEC",
			"SDL_Window",
			"!=",
			"void",
			"END_OF_MAIN",
			"timer_init",
			"init_managers",
			"init_basic_stuff",
			"include",
			"video",
			"include"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"_WIN32",
			"a5c004b4-2d4b-494e-bf01-45fc492522c7",
			"xor_x",
			"",
			"postprocess_prog_id",
			"&mv",
			"r)",
			"g)",
			"36",
			"on_up",
			"on_down",
			"control",
			"key",
			"MIDDLE",
			"-5",
			"-9",
			"2",
			"-4",
			"-7",
			"3",
			"14",
			"6",
			"pY",
			"pX",
			"t",
			"old_max",
			"old_range"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 8,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/bg.cpp",
					"settings":
					{
						"buffer_size": 9490,
						"regions":
						{
						},
						"selection":
						[
							[
								2337,
								2337
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1159.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/bg_editor.cpp",
					"settings":
					{
						"buffer_size": 8796,
						"regions":
						{
						},
						"selection":
						[
							[
								3692,
								3692
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1940.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/bg_render.cpp",
					"settings":
					{
						"buffer_size": 17607,
						"regions":
						{
						},
						"selection":
						[
							[
								4075,
								4081
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2528.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/thirdparty/imgui.cpp",
					"settings":
					{
						"buffer_size": 428252,
						"regions":
						{
						},
						"selection":
						[
							[
								231153,
								231153
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 70233.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/bg_world.cpp",
					"settings":
					{
						"buffer_size": 7715,
						"regions":
						{
						},
						"selection":
						[
							[
								3880,
								3880
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1914.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/C/Users/Jagannath/Documents/Programming/_old/Trig/main.cpp",
					"settings":
					{
						"buffer_size": 5844,
						"regions":
						{
						},
						"selection":
						[
							[
								1448,
								1448
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 550.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/C/Users/Jagannath/Documents/Programming/_old/tilemapper/tilemapper.c",
					"settings":
					{
						"buffer_size": 5450,
						"regions":
						{
						},
						"selection":
						[
							[
								2295,
								2295
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 975.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/D/Programming/fractal/fractal.c",
					"settings":
					{
						"buffer_size": 8137,
						"regions":
						{
						},
						"selection":
						[
							[
								295,
								295
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/C/Users/Jagannath/Desktop/script.py",
					"settings":
					{
						"buffer_size": 859,
						"regions":
						{
						},
						"selection":
						[
							[
								507,
								507
							]
						],
						"settings":
						{
							"auto_name": "# This script re-organizes date-named (yyyy-mm-dd)",
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/primitives.cpp",
					"settings":
					{
						"buffer_size": 7953,
						"regions":
						{
						},
						"selection":
						[
							[
								4067,
								4067
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3228.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		},
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 10,
					"file": "src/thirdparty/imgui.h",
					"settings":
					{
						"buffer_size": 122864,
						"regions":
						{
						},
						"selection":
						[
							[
								113612,
								113618
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 17815.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "src/bg.h",
					"settings":
					{
						"buffer_size": 1015,
						"regions":
						{
						},
						"selection":
						[
							[
								144,
								144
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "src/bg_render.h",
					"settings":
					{
						"buffer_size": 2213,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "src/bg_world.h",
					"settings":
					{
						"buffer_size": 963,
						"regions":
						{
						},
						"selection":
						[
							[
								99,
								99
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "/C/Users/Jagannath/Documents/Programming/dualcontouring_test/dualcontouring.cpp",
					"settings":
					{
						"buffer_size": 2897,
						"regions":
						{
						},
						"selection":
						[
							[
								352,
								352
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1287.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.aaa_package_dev":
	{
		"height": 139.0
	},
	"output.build|C:\\Program Files (x86)\\Arduino\\libraries\\Albert_Adafruit_PCD8544|1440041757.8":
	{
		"height": 283.0
	},
	"output.build|C:\\Program Files (x86)\\Arduino\\libraries\\Albert_Adafruit_PCD8544|1440046652.93":
	{
		"height": 277.0
	},
	"output.build|C:\\Users\\Jagannath\\Documents\\Arduino\\joy_test|1439257483.88":
	{
		"height": 94.0
	},
	"output.build|C:\\Users\\Jagannath\\Documents\\Arduino\\lcd_test2|1440041412.39":
	{
		"height": 94.0
	},
	"output.build|C:\\Users\\Jagannath\\Documents\\Arduino\\lcd_test2|1440041503.86":
	{
		"height": 94.0
	},
	"output.build|C:\\Users\\Jagannath\\Documents\\Arduino\\lcd_test2|1440041523.3":
	{
		"height": 94.0
	},
	"output.build|C:\\Users\\Jagannath\\Documents\\Arduino\\lcd_test2|1440041559.54":
	{
		"height": 94.0
	},
	"output.build|C:\\Users\\Jagannath\\Documents\\Arduino\\lcd_test2|1440041623.08":
	{
		"height": 94.0
	},
	"output.build|C:\\Users\\Jagannath\\Documents\\Arduino\\lcd_test2|1440041743.97":
	{
		"height": 94.0
	},
	"output.build|C:\\Users\\Jagannath\\Documents\\Arduino\\sketch_aug17a|1439860797.34":
	{
		"height": 396.0
	},
	"output.build|C:\\Users\\Jagannath\\Documents\\Arduino\\sketch_aug17a|1439861147.63":
	{
		"height": 94.0
	},
	"output.exec":
	{
		"height": 148.0
	},
	"output.git":
	{
		"height": 94.0
	},
	"output.package_dev":
	{
		"height": 101.0
	},
	"output.upload|C:\\Users\\Jagannath\\Documents\\Arduino\\joy_test|1439257517.49":
	{
		"height": 94.0
	},
	"output.upload|C:\\Users\\Jagannath\\Documents\\Arduino\\joy_test|1439257549.76":
	{
		"height": 94.0
	},
	"output.upload|C:\\Users\\Jagannath\\Documents\\Arduino\\led_matrix|1456544077.7":
	{
		"height": 94.0
	},
	"output.upload|C:\\Users\\Jagannath\\Documents\\Arduino\\led_matrix|1456544134.03":
	{
		"height": 94.0
	},
	"output.upload|C:\\Users\\Jagannath\\Documents\\Arduino\\led_matrix|1456544147.08":
	{
		"height": 94.0
	},
	"output.upload|C:\\Users\\Jagannath\\Documents\\Arduino\\led_matrix|1456544219.66":
	{
		"height": 94.0
	},
	"output.upload|C:\\Users\\Jagannath\\Documents\\Arduino\\led_matrix|1456544248.21":
	{
		"height": 94.0
	},
	"output.upload|C:\\Users\\Jagannath\\Documents\\Arduino\\led_matrix|1456545098.5":
	{
		"height": 94.0
	},
	"output.upload|C:\\Users\\Jagannath\\Documents\\Arduino\\led_matrix|1456545164.1":
	{
		"height": 94.0
	},
	"output.upload|C:\\Users\\Jagannath\\Documents\\Arduino\\sketch_aug17a|1439860834.58":
	{
		"height": 94.0
	},
	"output.upload|C:\\Users\\Jagannath\\Documents\\Arduino\\sketch_aug17a|1439860868.76":
	{
		"height": 94.0
	},
	"output.upload|C:\\Users\\Jagannath\\Documents\\Arduino\\sketch_aug17a|1439860886.9":
	{
		"height": 450.0
	},
	"output.upload|C:\\Users\\Jagannath\\Documents\\Arduino\\sketch_aug17a|1439860928.66":
	{
		"height": 94.0
	},
	"output.upload|C:\\Users\\Jagannath\\Documents\\Arduino\\sketch_aug17a|1439861008.85":
	{
		"height": 94.0
	},
	"output.upload|C:\\Users\\Jagannath\\Documents\\Arduino\\sketch_aug17a|1439861089.9":
	{
		"height": 94.0
	},
	"output.upload|C:\\Users\\Jagannath\\Documents\\Arduino\\sketch_aug17a|1439861096.65":
	{
		"height": 94.0
	},
	"output.upload|C:\\Users\\Jagannath\\Documents\\Arduino\\sketch_aug17a|1439861104.61":
	{
		"height": 94.0
	},
	"output.upload|C:\\Users\\Jagannath\\Documents\\Arduino\\sketch_aug17a|1439861161.37":
	{
		"height": 94.0
	},
	"output.upload|C:\\Users\\Jagannath\\Documents\\Programming\\Adventur\\src|1439861134.74":
	{
		"height": 94.0
	},
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"debug.",
				"win/debug.bat"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"/C/Users/Jagannath/Documents/Programming/game/game.sublime-project"
			]
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 195.0,
	"status_bar_visible": true
}
